@page "/fetchdata"
@using Core
@inject IRequestClient<GetWeatherReports> weatherReportsClient

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick="@ShowModal" class="btn btn-primary">Create Report</button>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.CreatedDate.ToShortDateString()</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherReport> forecasts;
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var response = await weatherReportsClient.GetResponse<GetWeatherReportsResult>(new { });
        forecasts = response.Message.WeatherReports;

        StateHasChanged();
    }

    async Task ShowModal()
    {
        var formModal = Modal.Show<CreateWeatherReport>("Create Weather Report", new ModalOptions { Animation = ModalAnimation.FadeInOut(1) });
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            forecasts.Insert(0, result.Data as WeatherReport);
        }
    }
}
